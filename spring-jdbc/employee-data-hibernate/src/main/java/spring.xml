<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:repository="http://www.springframework.org/schema/data/repository"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/data/repository http://www.springframework.org/schema/data/repository/spring-repository-1.11.xsd">

	<context:property-placeholder
		location="classpath:jdbc.properties" ignore-unresolvable="true" />
	<context:property-placeholder
		location="classpath:hibernate.properties" ignore-unresolvable="true" />

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="schema" value="${jdbc.schema}" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="annotatedClasses"
			value="com.karthik.data.hibernate.model.Employee, 
				   com.karthik.data.hibernate.model.Department,
				   com.karthik.data.hibernate.model.Asset" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.default_catalog">${hibernate.default_catalog}</prop>
				<prop key="hibernate.default_schema">${hibernate.default_schema}</prop>
			</props>
		</property>
	</bean>

	<tx:annotation-driven
		transaction-manager="transactionManager" />

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- This bean can also be registered with spring by using annotation @Repository 
		on top of the class and have its package scanned by spring by using context:component-scan 
		tag in spring.xml -->

	<bean id="employeeDao"
		class="com.karthik.data.hibernate.dao.impl.EmployeeDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="departmentDao"
		class="com.karthik.data.hibernate.dao.impl.DepartmentDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="assetDao" class="com.karthik.data.hibernate.dao.impl.AssetDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<bean id="employeeService"
		class="com.karthik.data.hibernate.service.impl.EmployeeServiceImpl">
		<property name="employeeDao" ref="employeeDao" />
	</bean>
	
	<bean id="departmentService"
		class="com.karthik.data.hibernate.service.impl.DepartmentServiceImpl">
		<property name="departmentDao" ref="departmentDao" />
	</bean>
	
	<bean id="assetService"
		class="com.karthik.data.hibernate.service.impl.AssetServiceImpl">
		<property name="assetDao" ref="assetDao" />
	</bean>

</beans>
